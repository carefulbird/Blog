(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{998:function(e,t,r){"use strict";r.r(t);var a=r(1),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"非严格等和加法的-潜规则"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#非严格等和加法的-潜规则"}},[e._v("#")]),e._v(" 非严格等和加法的'潜规则'")]),e._v(" "),r("p",[e._v("记得在某次面试的时候，面试官问了我一个问题，即![]的答案是多少，当然，对于自认为把 JavaScript 学的还算可以的我来说不是什么问题，立即回答 false，因为一切对象转换为布尔值都是true。还不算完，接着立即问了我下一个问题，true == [] 吗？这问的有点懵，有点不知所措，不确定的答到是的，然后就回答了一些稀奇古怪的东西，反正就是不怎么了解慌张应付。当然，答案是错误的，为了心中的求知欲，我在网上找了大量的资料，写了很多 demo ，终于总结出一份还算满意的js隐式转换的逻辑和步骤，接下来，为你呈现~")]),e._v(" "),r("h2",{attrs:{id:"js的隐式转换"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#js的隐式转换"}},[e._v("#")]),e._v(" JS的隐式转换")]),e._v(" "),r("p",[e._v("要说到 JS 这门语言的特点，可以说是非常的多了，不过最让人印象深刻的莫过于上手容易不需要像强类型语言那样申明变量和计算比较繁琐。但是在使用过程中有一件事儿是让人头疼的，就是为了可以让不同类型的变量进行直接操作就要进行大量的隐式转换，其中的规则也不是特别清晰，特别是当你刚刚接触这门语言的时候。本篇文章以介绍最为常见的 == 和 + 为你揭开隐式转换的神秘面纱。")]),e._v(" "),r("h3",{attrs:{id:"什么是隐式转换"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#什么是隐式转换"}},[e._v("#")]),e._v(" 什么是隐式转换")]),e._v(" "),r("p",[e._v("到底什么是隐式转换。简单的一句话可以概括。")]),e._v(" "),r("p",[e._v("隐式转换："),r("strong",[e._v("在不同类型的操作数运算时为了让它们能够正常运行得到正确的结果，将其中一个或者多个操作数转换为同一类型的动作就是隐式转换")]),e._v("。")]),e._v(" "),r("p",[e._v("当然，这也是JS的特色了，学习成本相比较于其他强类型的语言来说很低了，但是学到后面的坑也是一样的多。特别是早期的JS，大部分的函数都包含有隐式转换，直到后面ECMAScript的演进，倾向于将错误给抛出来\n"),r("img",{attrs:{src:"http://note.youdao.com/yws/res/1054/WEBRESOURCE2f1b58661ef286d1ab3c37d87c607d41",alt:"image.png"}}),e._v("\n这个图是TypeError关键字在 "),r("a",{attrs:{href:"https://262.ecma-international.org/6.0/",target:"_blank",rel:"noopener noreferrer"}},[e._v("ECMAScript"),r("OutboundLink")],1),e._v(" 文档出现的次数，也就是说后面的标准文档更倾向于将这个类型转换的错误给用户抛出来而不是向以前那样进行一个隐式转换。")]),e._v(" "),r("h2",{attrs:{id:"基本知识"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#基本知识"}},[e._v("#")]),e._v(" 基本知识")]),e._v(" "),r("p",[e._v("要了解隐式转换需要提前知道以下几个概念")]),e._v(" "),r("h2",{attrs:{id:"toprimitive-input-preferredtype"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#toprimitive-input-preferredtype"}},[e._v("#")]),e._v(" ToPrimitive ( input [ , PreferredType ] )")]),e._v(" "),r("p",[e._v("要提到隐式转换，不得不提及的一个函数就是 ToPrimitive() ,当然在 "),r("a",{attrs:{href:"https://262.ecma-international.org/6.0/#sec-toprimitive",target:"_blank",rel:"noopener noreferrer"}},[e._v("ECMAScript sec-toprimitive"),r("OutboundLink")],1),e._v(" 的文档上对该函数也有非常详细的解释，这里用一个流程图来说明一下它的特性。")]),e._v(" "),r("p",[r("img",{attrs:{src:"http://note.youdao.com/yws/res/300/WEBRESOURCEaaff2deee44a87331a5b868679e2e433",alt:"image.png"}})]),e._v(" "),r("ol",[r("li",[e._v("如果输入的是一个原始值，那么函数的结果就是直接返回本身。")]),e._v(" "),r("li",[e._v("如果输入的是对象类型的值，且 preferredType 的值是 string ，那么就会先调用 "),r("code",[e._v("toString()")]),e._v(" 得到返回值，如果该返回值还是引用数值那么还会继续调用 "),r("code",[e._v("valueOf()")]),e._v(" 得到返回值，如果该返回值还是引用数值就会抛出一个TypeError的错误，否则返回这次的返回值。")]),e._v(" "),r("li",[e._v("如果 preferredType 的值是 number ，那么调用的顺序和（2）的步骤相反，先调用 "),r("code",[e._v("valueOf()")]),e._v(" ，再调用 "),r("code",[e._v("toString()")]),e._v(" 方法，当然里面的结果判断都是和步骤2一致。")]),e._v(" "),r("li",[e._v("如果缺少 preferredType， Date 类创建的实例对象隐式转换调用这个方法 preferredType 的值是string，其他引用数据隐式转换 preferredType 是number")])]),e._v(" "),r("p",[e._v("下面举一个恰当的例子")]),e._v(" "),r("div",{staticClass:"language-javascript extra-class"},[r("pre",{pre:!0,attrs:{class:"language-javascript"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("let")]),e._v(" x"),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),r("span",{pre:!0,attrs:{class:"token function"}},[e._v("valueOf")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        console"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[e._v("log")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),r("span",{pre:!0,attrs:{class:"token string"}},[e._v("'valueof'")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n        "),r("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n    "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),r("span",{pre:!0,attrs:{class:"token function"}},[e._v("toString")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        console"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[e._v("log")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),r("span",{pre:!0,attrs:{class:"token string"}},[e._v("'tostring'")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n        "),r("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n    "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\nconsole"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[e._v("log")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),r("span",{pre:!0,attrs:{class:"token function"}},[e._v("String")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("x"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// tostring")]),e._v("\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// valueof")]),e._v("\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Uncaught TypeError: Cannot convert object to primitive value")]),e._v("\n")])])]),r("p",[e._v("从上述的结果可以看出当在调用 "),r("code",[e._v("String()")]),e._v(" 方法显式转换的时候，此刻的 preferredType 值是string，会先调用 "),r("code",[e._v("toString()")]),e._v(" 再调用 "),r("code",[e._v("valueOf()")]),e._v(" 方法，当然最后的valueOf方法返回的是[] ,还是一个引用数值，所以会抛出 TypeError")]),e._v(" "),r("h3",{attrs:{id:"tonumber"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#tonumber"}},[e._v("#")]),e._v(" ToNumber()")]),e._v(" "),r("p",[e._v("在 非严格等 == 的操作数两边是不确定数据类型的，为了让两边能够正常的比较值，最终的结果比较往往是 "),r("code",[e._v("Number(x) == Number(y)")]),e._v("。")]),e._v(" "),r("p",[e._v("该函数也是在 "),r("a",{attrs:{href:"https://262.ecma-international.org/6.0/#sec-tonumber",target:"_blank",rel:"noopener noreferrer"}},[e._v("ECMA文档  sec-tonumber"),r("OutboundLink")],1),e._v("中有详细的说明，简单的用一个表格来说明一下转换的结果。")]),e._v(" "),r("table",[r("thead",[r("tr",[r("th",[e._v("Argument Type")]),e._v(" "),r("th",[e._v("Result")])])]),e._v(" "),r("tbody",[r("tr",[r("td",[e._v("undefined")]),e._v(" "),r("td",[e._v("NaN")])]),e._v(" "),r("tr",[r("td",[e._v("null")]),e._v(" "),r("td",[e._v("+0")])]),e._v(" "),r("tr",[r("td",[e._v("boolean")]),e._v(" "),r("td",[e._v("true is converted to 1, false is converted to +0")])]),e._v(" "),r("tr",[r("td",[e._v("string")]),e._v(" "),r("td",[e._v('parse the number in the string. For example, "324" is converted to 324')])]),e._v(" "),r("tr",[r("td",[e._v("symbol")]),e._v(" "),r("td",[e._v("TypeError: cannot convert a Symbol value to a number")])]),e._v(" "),r("tr",[r("td",[e._v("object")]),e._v(" "),r("td",[e._v("ToPrimitive(obj, Number) and then applying ToNumber() to the (primitive) result.")])])])]),e._v(" "),r("p",[e._v("下面针对表格中的特殊情况说明一下")]),e._v(" "),r("ol",[r("li",[e._v("引用数据类型在使用 "),r("code",[e._v("ToNumber()")]),e._v(" 方法时会先调用 "),r("code",[e._v("ToPrimitive(obj, Number)")]),e._v(" 尽可能的得到一个原始值，然后再把该原始值调用 "),r("code",[e._v("oNumber()")]),e._v(" 得到结果")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("let y={\n    valueOf(){\n        console.log('valuey');\n        return []\n    },\n    toString(){\n        console.log('string');\n        return '99'\n    },\n}\n\nconsole.log(Number(y));\n// valuey\n// string\n// 99\n")])])]),r("p",[e._v("当然，上述调用的 "),r("code",[e._v("Number()")]),e._v(" 函数是可以让用户显示调用 "),r("code",[e._v("ToNumber()")]),e._v(" 的方法，通过结果可以看出对象是先调用了 "),r("code",[e._v("ToPrimitive()")]),e._v(" 再将得到的原始值转换为number类型")]),e._v(" "),r("ol",{attrs:{start:"2"}},[r("li",[e._v("symbol 类型在进行 ToNumber 操作时会报错，所以在进行 == 非严格等比较有 symbol 类型时如果不是和自身比较会直接等于 false")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("console.log(Symbol() == Symbol()); // false\nconsole.log(Number(Symbol())); // Uncaught TypeError: Cannot convert a Symbol value to a number\n")])])]),r("h3",{attrs:{id:"toboolean"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#toboolean"}},[e._v("#")]),e._v(" ToBoolean()")]),e._v(" "),r("p",[e._v("当然，谈及隐式转换怎么能少得了 "),r("code",[e._v("ToBoolean()")]),e._v("，在日常开发中经常使用的 !x可是ToBoolean的杰作，关于 "),r("code",[e._v("ToBoolean")]),e._v(" 的转换细节在"),r("a",{attrs:{href:"https://262.ecma-international.org/6.0/#sec-toboolean",target:"_blank",rel:"noopener noreferrer"}},[e._v("ECMAScript文档 -sec-toboolean"),r("OutboundLink")],1),e._v("中说明，下面用一个表格来说明它的转换结果。")]),e._v(" "),r("table",[r("thead",[r("tr",[r("th",[e._v("Argument Type")]),e._v(" "),r("th",[e._v("Result")])])]),e._v(" "),r("tbody",[r("tr",[r("td",[e._v("Undefined")]),e._v(" "),r("td",[e._v("Return false.")])]),e._v(" "),r("tr",[r("td",[e._v("Null")]),e._v(" "),r("td",[e._v("Return false.")])]),e._v(" "),r("tr",[r("td",[e._v("Boolean")]),e._v(" "),r("td",[e._v("Return argument.")])]),e._v(" "),r("tr",[r("td",[e._v("Number")]),e._v(" "),r("td",[e._v("Return false if argument is +0, −0, or NaN; otherwise return true.")])]),e._v(" "),r("tr",[r("td",[e._v("String")]),e._v(" "),r("td",[e._v("Return false if argument is the empty String (its length is zero); otherwise return true.")])]),e._v(" "),r("tr",[r("td",[e._v("Symbol")]),e._v(" "),r("td",[e._v("Return true.")])]),e._v(" "),r("tr",[r("td",[e._v("Object")]),e._v(" "),r("td",[e._v("Return true.")])])])]),e._v(" "),r("p",[e._v("特别注意的有以下几点：")]),e._v(" "),r("ol",[r("li",[e._v("所以对象转换结果都是 true")]),e._v(" "),r("li",[e._v("Symbol 类型转换结果全都为true")]),e._v(" "),r("li",[e._v("string类型只有空字符串转为false")]),e._v(" "),r("li",[e._v("在数字进行 ToBoolean操作时，负数是会转换为 true 的，这在平时开发过程中需要注意。")])]),e._v(" "),r("p",[r("code",[e._v("Boolean(undefined) = true")])]),e._v(" "),r("h2",{attrs:{id:"场景分析"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#场景分析"}},[e._v("#")]),e._v(" 场景分析")]),e._v(" "),r("h3",{attrs:{id:"严格等的比较分析"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#严格等的比较分析"}},[e._v("#")]),e._v(" === 严格等的比较分析")]),e._v(" "),r("p",[e._v("在 === 比较时有一个重要的结论，")]),e._v(" "),r("blockquote",[r("p",[e._v("=== 不会进行隐式转换")])]),e._v(" "),r("p",[e._v("所以对于a === b 严格等的规则对于 == 来说要简单的多，总结了一下，有以下几点")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("Strict Equality Comparison\nThe comparison x === y, where x and y are values, produces true or false. Such a comparison is performed as follows:\n\nIf Type(x) is different from Type(y), return false.\nIf Type(x) is Number, then\na. If x is NaN, return false.\nb. If y is NaN, return false.\nc. If x is the same Number value as y, return true.\nd. If x is +0 and y is ‐0,return true.\ne. If x is ‐0 and y is +0, return true.\nf. Return false.\nReturn SameValueNonNumber(x, y).\nNOTE This algorithm differs from the SameValue Algorithm in its treatment of signed zeroes and NaNs.\n")])])]),r("p",[e._v("上述的结论是"),r("a",{attrs:{href:"https://262.ecma-international.org/6.0/#sec-strict-equality-comparison",target:"_blank",rel:"noopener noreferrer"}},[e._v("ECMAScript文档 - sec-strict-equality-comparison "),r("OutboundLink")],1),e._v("对于严格等的结论描述，简单的翻译一下有以下几点")]),e._v(" "),r("ol",[r("li",[e._v("a 和 b 的类型不同，一定返回false")]),e._v(" "),r("li",[e._v("引用数值不是比较同一个引用情况直接返回 false")]),e._v(" "),r("li",[e._v("同一个类型原始值值相等返回true，不相等返回 false")]),e._v(" "),r("li",[e._v("symbol 类型的值只有和本身比较才为 true")]),e._v(" "),r("li",[e._v("+0 和 -0 全等，返回 true")])]),e._v(" "),r("h3",{attrs:{id:"抽象等的比较分析"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#抽象等的比较分析"}},[e._v("#")]),e._v(" == 抽象等的比较分析")]),e._v(" "),r("p",[e._v("在分析之前，考一考你们下面的12个等式结果会是多少,因为在日常开发中通常会进行值判断，所以列举了很多与 boolean 值相转换的例子，希望在理解这些转换以后会对你的日常开发值判断有一些帮助。")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("[] == true\n![] == true\n2 == true\n'1' == true\n-1 == false\n[1] == '1'\n!null == false\nnull == false\n!'' == true\n!'0' == true\n'' == 0\n'0' == 0\n")])])]),r("p",[e._v("似曾相识的感觉，却又无法推理出正确的答案，不急，这就为你呈现上述的结果步骤")]),e._v(" "),r("p",[e._v("对于抽象等而言，其中会多一个隐式转换的步骤，下面是"),r("a",{attrs:{href:"https://262.ecma-international.org/6.0/#sec-abstract-equality-comparison",target:"_blank",rel:"noopener noreferrer"}},[e._v("ECMAScript文档 sec-abstract-equality-comparison"),r("OutboundLink")],1),e._v(" 对于抽象等的描述")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("Abstract Equality Comparison\nThe comparison x == y, where x and y are values, produces true or false. Such a comparison is performed as follows:\n\nReturnIfAbrupt(x).\nReturnIfAbrupt(y).\nIf Type(x) is the same as Type(y), then\nReturn the result of performing Strict Equality Comparison x === y.\nIf x is null and y is undefined, return true.\nIf x is undefined and y is null, return true.\nIf Type(x) is Number and Type(y) is String,\nreturn the result of the comparison x == ToNumber(y).\nIf Type(x) is String and Type(y) is Number,\nreturn the result of the comparison ToNumber(x) == y.\nIf Type(x) is Boolean, return the result of the comparison ToNumber(x) == y.\nIf Type(y) is Boolean, return the result of the comparison x == ToNumber(y).\nIf Type(x) is either String, Number, or Symbol and Type(y) is Object, then\nreturn the result of the comparison x == ToPrimitive(y).\nIf Type(x) is Object and Type(y) is either String, Number, or Symbol, then\nreturn the result of the comparison ToPrimitive(x) == y.\nReturn false.\n")])])]),r("p",[e._v("简单的翻译总结一下，有以下几点：")]),e._v(" "),r("ol",[r("li",[e._v("undefined 和 null 只有和 本身或者另一个null 或者 undefined 比较结果为true，其余的结果皆为 false")]),e._v(" "),r("li",[e._v("Symbol只有和自身比较才为 true")]),e._v(" "),r("li",[r("strong",[e._v("不同类型的操作数两边比较将尽量转换为 "),r("code",[e._v("ToNumber(x)")]),e._v(" 和 "),r("code",[e._v("ToNumber(y)")]),e._v("  的比较")])]),e._v(" "),r("li",[e._v("相同类型的操作数比较会和 === 的结果保持一致。")])]),e._v(" "),r("p",[e._v("上述的1 和 2 比较好理解，但是对于第三点来说左右两边的数据类型错综复杂，所以只要记住抽象等的结果会"),r("strong",[e._v("将是两个数字值的比较")]),e._v("那么一切的问题都会变得简单起来。下面对于这点进行说明。")]),e._v(" "),r("ul",[r("li",[e._v("首先，对于两边是引用数据来说，和严格等的情况一致，不会进行显示转换。")]),e._v(" "),r("li",[e._v("两边都是原始值类型会调用 ToNumber() 方法得到数值进行比较。")]),e._v(" "),r("li",[e._v("一边是引用数值一边是引用数值，会先将引用数值调用 "),r("code",[e._v("ToPrimitive()")]),e._v(" 方法转换为原始值，然后就会是两个原始值的比较。")])]),e._v(" "),r("h4",{attrs:{id:"解析例子"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#解析例子"}},[e._v("#")]),e._v(" 解析例子")]),e._v(" "),r("h5",{attrs:{id:"空数组比较"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#空数组比较"}},[e._v("#")]),e._v(" 空数组比较")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("[] == true // false\n![] == true // false\n['1'] == 1 // true\n")])])]),r("p",[e._v("对于上述的三个例子,都是一个数组和 boolean 值比较，但是它们的转换形式却完全不同，具体情况具体分析:")]),e._v(" "),r("ol",[r("li",[e._v("[] == true 的情况，左边是引用数据，右边是原始值，那么会先调用 "),r("code",[e._v("ToPrimitive()")]),e._v(" 方法把[] 转换为''(先调用 valueOf 方法,再调用toString方法) ,接下来的结果就变成了 '' == true ;其次会再次调用 "),r("code",[e._v("ToNumber()")]),e._v(" 方法进行比较，这样结果就变成了 "),r("code",[e._v("ToNumber('') == ToNumber(true)")]),e._v(" ,按照上诉对 "),r("code",[e._v("ToNumber()")]),e._v(" 的描述，结果就变成了 "),r("code",[e._v("0 == 1")]),e._v("，所以结果就是 false。")]),e._v(" "),r("li",[e._v("![] == true 的情况，首先要明确的是取反操作符会隐式的调用 "),r("code",[e._v("toBoolean()")]),e._v(" 方法得到一个确定的 boolean 值，还有一个点就是所有的对象转换为 boolean 一定是 true，所以![] 会变成 "),r("code",[e._v("!(toBoolean([])")]),e._v(",那么结果就会变成 "),r("code",[e._v("false == true")]),e._v(" ，结果自然是 false。")]),e._v(" "),r("li",[r("code",[e._v("['1'] == 1")]),e._v(" 的比较和第一个式子的转换方式特别相似。调用 "),r("code",[e._v("ToPrimitive()")]),e._v(" 得到 "),r("code",[e._v("'1' == 1")]),e._v(" ，然后再把 '1' 调用 "),r("code",[e._v("ToNumber()")]),e._v(" 方法得到 "),r("code",[e._v("1 ==1")]),e._v("，结果为 true。")])]),e._v(" "),r("h5",{attrs:{id:"原始值类型之间比较"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#原始值类型之间比较"}},[e._v("#")]),e._v(" 原始值类型之间比较")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("2 == true // false\n'1' == true // true\n-1 == false // false\n")])])]),r("p",[e._v("对于 string 类型和 boolean 类型来说，不是同一种类型的操作数会调用 "),r("code",[e._v("ToNumber()")]),e._v(" 方法得到相对应的 number 类型再进行比较。例如在 "),r("code",[e._v("2 == true")]),e._v(" 的比较中，true 是 boolean 类型的值，通过调用 "),r("code",[e._v("ToNumber(true)")]),e._v(" 将会得到 1，最终的比较结果就是 "),r("code",[e._v("2 == 1")]),e._v("，答案自然是 false。同理，在第三例中，"),r("code",[e._v("ToNumber(false)")]),e._v(" 的结果为0，最终比较结果为 "),r("code",[e._v("-1 == 0")]),e._v("，所以答案也是 false。")]),e._v(" "),r("h5",{attrs:{id:"取反符号多作怪"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#取反符号多作怪"}},[e._v("#")]),e._v(" !取反符号多作怪？")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("!null == false // false\nnull == false // false\n!'' == true // true\n!'0' == true // false\n")])])]),r("p",[e._v("null 是一个比较特殊的值，代表原型链的顶端或者是表示此处不该有值，对于第二个例子，null 只能和undefined 或者 null非严格等，而不是去执行 "),r("code",[e._v("ToNumber(null)")]),e._v("。抛开第二个例子以外，其余的三个例子都和一个符号相关，取反符号!，接下来逐个分析。!null == false，!操作数的时候会将隐式的调用 "),r("code",[e._v("toBoolean(null)")]),e._v(" 得到false(查表可得) 结果就变成了 !false ==false ，结果自然是false。对于第三个例子和第四个例子是同一个情况，都会先调用 "),r("code",[e._v("toBoolean()")]),e._v(" 方法，不过需要"),r("strong",[e._v("注意")]),e._v("的是，"),r("code",[e._v("toBoolean('0')")]),e._v(" 的结果是 true，因为它是一个有具体内容的字符串，这一点我在开发的时候经常出错。")]),e._v(" "),r("h3",{attrs:{id:"运算符的操作过程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#运算符的操作过程"}},[e._v("#")]),e._v(" + 运算符的操作过程")]),e._v(" "),r("p",[e._v("+号运算在日常开发中使用频率也比较高，大部分都是相同类型基本数据之间相加（当然这也是最符合规范的），但是如果不小心进行了不同类型的操作数的相加甚至是和对象相加呢，那这里面会碰撞出怎样的火花呢？假如以下几个例子的结果会是什么呢？")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("2+[3,4]\n[]+{}\n{}+[]\n{}+null\n")])])]),r("h4",{attrs:{id:"加法运算步骤"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#加法运算步骤"}},[e._v("#")]),e._v(" 加法运算步骤")]),e._v(" "),r("ol",[r("li",[e._v("将 + 号运算符两边的引用值转换为原始值再相加")]),e._v(" "),r("li",[e._v("原值值转换为 "),r("code",[e._v("ToNumber(x) + ToNumber(y)")])])]),e._v(" "),r("h5",{attrs:{id:"预设类型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#预设类型"}},[e._v("#")]),e._v(" 预设类型")]),e._v(" "),r("p",[e._v("首先，在 + 号运算中需要明确的是，+ 号运算两边是不确定左右操作数基本类型的，也就是说")]),e._v(" "),r("p",[r("strong",[e._v("如果一个运算无法确定类型，那么在类型转换前，它的运算数将被预设为 number")]),e._v("。")]),e._v(" "),r("p",[e._v("这个结论非常重要，它会直接影响到 "),r("code",[e._v("ToPrimitive")]),e._v(" 函数的 "),r("code",[e._v("<button></buttom>")]),e._v(" preferredType是number,然后将引用值转换为基础类型会先调用 "),r("code",[e._v("valueOf()")]),e._v(" 再调用 "),r("code",[e._v("toString()")]),e._v(" 方法。")]),e._v(" "),r("ul",[r("li",[e._v("[] 先调用 "),r("code",[e._v("valueOf()")]),e._v(" 会得到本身 [] ,之后再调用 "),r("code",[e._v("toString()")]),e._v(" 方法会得到''")]),e._v(" "),r("li",[e._v("{} 先调用 "),r("code",[e._v("valueOf()")]),e._v(" 会得到本身 {} ,调用 "),r("code",[e._v("toString()")]),e._v(" 方法会得到 [object Object]")]),e._v(" "),r("li",[e._v("[3,4] 和空数组不同的是,调用 "),r("code",[e._v("toString()")]),e._v(" 方法会将里面的元素全部取出来再转换为字符串 '3,4'")])]),e._v(" "),r("h5",{attrs:{id:"原始值的相加"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#原始值的相加"}},[e._v("#")]),e._v(" 原始值的相加")]),e._v(" "),r("p",[e._v("当操作数两边都转换为基本数据类型的时候，事情就变得容易起来，只要数据类型不是number类型时就会去调用 "),r("code",[e._v("ToNumber()")]),e._v(" 函数转换为 number 类型的值。例如下面的几个例子:")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("null + undefined ?\nfalse + true ?\nSymbol()+Symbol() ?\n")])])]),r("p",[e._v("根据上面的 ToNumber函数查表可以得到 "),r("code",[e._v("ToNumber(null) = 0")]),e._v(" , "),r("code",[e._v("ToNumber(undefined) =NaN")]),e._v(", "),r("code",[e._v("ToNumber(false) = 0")]),e._v(", "),r("code",[e._v("ToNumber(true) = 1")]),e._v(", "),r("code",[e._v("ToNumber(Symbol())")]),e._v(" 会抛出一个错误，所以最终的结果就是")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("null + undefined = NaN\nfalse + true = 1\nSymbol()+Symbol()  TypeError: Cannot convert a Symbol value to a number\n")])])]),r("h5",{attrs:{id:"字符串拼接"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#字符串拼接"}},[e._v("#")]),e._v(" 字符串拼接")]),e._v(" "),r("p",[e._v("当然，在操作数相加过程中，难免会出现有字符串参与，不管是在引用值转换为基础值的过程中还是原本就是字符串，它的相加就会变成"),r("strong",[e._v("字符串相加")]),e._v("，而且在相加过程只要有一个操作数变成了字符串类型那么就会拼接不管位置是前还是后。")]),e._v(" "),r("p",[e._v("举一个简单的例子：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("const y={\n    valueOf(){\n        console.log('valueOf');\n        return {}\n    },\n    toString(){\n        console.log('toString');\n        return '99'\n    },\n}\nconsole.log(null + y) \n// valueOf\n// toString\n// null99\n")])])]),r("p",[e._v("在上述的例子中，在 null 和 引用值 y 相加的时候，由于 y 是一个引用数据类型所以要先调用 "),r("code",[e._v("ToPrimitive(y)")]),e._v(" 得到一个基本数据类型。由于在 + 号运算符中不知道运算类型会把 preferredType 预设为number，所以会先调用 "),r("code",[e._v("valueOf()")]),e._v(" 方法再调用 "),r("code",[e._v("toString()")]),e._v(" 方法得到了字符串 '99'。但是此处最为"),r("strong",[e._v("重要")]),e._v("的是有两点：")]),e._v(" "),r("ul",[r("li",[e._v("判断是否执行完 "),r("code",[e._v("valueOf()")]),e._v(" 方法 还继续执行 "),r("code",[e._v("toString()")]),e._v(" 方法是根据 "),r("code",[e._v("valueOf()")]),e._v(" 函数的返回值是否为引用数据类型而不是本身")]),e._v(" "),r("li",[e._v("在判断是否进行字符串拼接也是根据 "),r("code",[e._v("valueOf()")]),e._v(" 函数和 "),r("code",[e._v("toString()")]),e._v(" 函数返回值是否是字符串类型。")])]),e._v(" "),r("h4",{attrs:{id:"分析例子"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#分析例子"}},[e._v("#")]),e._v(" 分析例子")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("2+[3,4] // 23,4\n[]+{} // [object Object]\n{}+[] // 0\n{}+null // 0\n")])])]),r("p",[e._v("在上面例子中包含了两种情况，分别是")]),e._v(" "),r("ul",[r("li",[e._v("包含引用数据类型的字符串拼接")]),e._v(" "),r("li",[e._v("在 {} 开头的 加法处理")])]),e._v(" "),r("h5",{attrs:{id:"字符串拼接情况"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#字符串拼接情况"}},[e._v("#")]),e._v(" 字符串拼接情况")]),e._v(" "),r("ul",[r("li",[e._v("在 [3,4] 和 2 相加的过程中，会把[3,4]转换为基本数据类型 '3,4'(通过调用ToPrimitive()),最后和2相加答案就是 23,4")]),e._v(" "),r("li",[e._v("[] + {} 和上例的处理方式一致，唯一的区别就是在最后调用 "),r("code",[e._v("toString()")]),e._v(" 方法的时候得到不同的值，[] 会得到空字符串，{} 会得到 '[object Object]'，所以最终的答案就是 [object Object]")])]),e._v(" "),r("h5",{attrs:{id:"开头的处理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#开头的处理"}},[e._v("#")]),e._v(" {} 开头的处理")]),e._v(" "),r("p",[e._v("这里要特意的说明一下 {} + x 这样格式相加的例子，因为有一个比较重要的知识点")]),e._v(" "),r("p",[r("strong",[e._v("Automatic Semicolon Insertion (ASI)：自动分号插入")])]),e._v(" "),r("blockquote",[r("p",[e._v("自动分号插入是 javascript 设计史上最大的铁板")])]),e._v(" "),r("p",[e._v("关于自动分号插入的具体可以参考这个"),r("a",{attrs:{href:"https://2ality.com/2011/05/semicolon-insertion.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("链接"),r("OutboundLink")],1)]),e._v(" "),r("p",[e._v("上面的代码会变成")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("{};+[]\n{};+null\n")])])]),r("p",[e._v("而且不幸的是这样的例子居然能够通过，所以最后的结果就会变成 +[] 和 +null。由于 + 号运算符能够明显的知道最终的结果要转换为number ,所以会直接调用 "),r("code",[e._v("toNumber([])")]),e._v(" 和 "),r("code",[e._v("toNumber(null)")]),e._v("，参考前面所提及的 "),r("code",[e._v("toNumber")]),e._v(" 函数转换规则，最终的答案就会变成 0 和 0。")]),e._v(" "),r("h2",{attrs:{id:"最后"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#最后"}},[e._v("#")]),e._v(" 最后")]),e._v(" "),r("p",[e._v("虽然 javascript 的隐式转换被后人一直诟病，后面也设计出一些可以进行数据类型检测的辅助语言 Typescript或者是 Flow，对于在可维护性和可读性上都有着非常大的提升。但是早期的 javascript语言对于 隐式转换所涉及的规范却是非常有意思的，这也许就是 Brendan Eich 在10天 通过借鉴 C语言、Java语言、Scheme语言、Self语言所设计出来的'混子语言'的魅力吧。")]),e._v(" "),r("blockquote",[r("p",[e._v("与其说我爱 Javascript，不如说我恨它。它是C语言和Self语言一夜情的产物。十八世纪英国文学家约翰逊博士说得好：'它的优秀之处并非原创，它的原创之处并不优秀。        - Brendan Eich")])]),e._v(" "),r("h2",{attrs:{id:"参考链接"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考链接"}},[e._v("#")]),e._v(" 参考链接")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://262.ecma-international.org/6.0/",target:"_blank",rel:"noopener noreferrer"}},[e._v("ECMAScript-6.0文档"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://2ality.com/2012/01/object-plus-object.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("What is {} + {} in JavaScript?"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://louiszhai.github.io/2015/12/11/js.boolean/",target:"_blank",rel:"noopener noreferrer"}},[e._v("JS布尔值(Boolean)转换规则"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Equality_comparisons_and_sameness",target:"_blank",rel:"noopener noreferrer"}},[e._v("JavaScript 中的相等性判断"),r("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=n.exports}}]);